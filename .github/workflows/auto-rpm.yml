name: Nightly Upstream Check and Tag

on:
  schedule:
    - cron: "0 3 * * *" # 03:00 UTC nightly
  workflow_dispatch:

permissions:
  contents: write

concurrency:
  group: auto-rpm-nightly
  cancel-in-progress: false

jobs:
  check_and_tag:
    name: Detect upstream version and create tag if needed
    runs-on: ubuntu-latest
    container: fedora:41
    outputs:
      version: ${{ steps.upstream.outputs.version }}
      tag-created: ${{ steps.create_tag.outputs.created }}
    steps:
      - name: Install tooling
        run: |
          set -eux
          dnf -y update
          dnf -y install git p7zip p7zip-plugins wget

      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get upstream version
        id: upstream
        run: |
          set -euxo pipefail
          chmod +x scripts/get-upstream-version.sh
          VER="$(scripts/get-upstream-version.sh)"
          echo "version=$VER" >> "$GITHUB_OUTPUT"

      - name: Check if tag exists
        id: tagcheck
        uses: actions/github-script@v7
        env:
          VERSION: ${{ steps.upstream.outputs.version }}
        with:
          script: |
            const tag = `v${process.env.VERSION}`;
            try {
              await github.rest.git.getRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: `tags/${tag}`,
              });
              core.setOutput('exists', 'true');
            } catch (e) {
              core.setOutput('exists', 'false');
            }

      - name: Verify git workspace
        run: |
          set -eux
          test -d "$GITHUB_WORKSPACE/.git"
          git -C "$GITHUB_WORKSPACE" rev-parse --git-dir

      - name: Create tag v${{ steps.upstream.outputs.version }}
        if: steps.tagcheck.outputs.exists != 'true'
        working-directory: ${{ github.workspace }}
        run: |
          set -euxo pipefail
          git -C "$GITHUB_WORKSPACE" config user.name "github-actions[bot]"
          git -C "$GITHUB_WORKSPACE" config user.email "github-actions[bot]@users.noreply.github.com"
          git -C "$GITHUB_WORKSPACE" tag "v${{ steps.upstream.outputs.version }}"
          git -C "$GITHUB_WORKSPACE" push origin "v${{ steps.upstream.outputs.version }}"
